/* hdrpng.js - by enki - https://enkimute.github.io */
!function(e,r,t){"undefined"!=typeof module&&module.exports?module.exports=t():"function"==typeof define&&define.amd?define(e,t):r[e]=t()}("HDRImage",this,function(){function e(){var e,r,a=document.createElement("canvas"),s="t",u=1,f=2.2,h=null;return a.__defineGetter__("exposure",function(){return u}),a.__defineSetter__("exposure",function(t){u=t,h&&(i(h,u,f,r.data),e.putImageData(r,0,0))}),a.__defineGetter__("gamma",function(){return f}),a.__defineSetter__("gamma",function(t){f=t,h&&(i(h,u,f,r.data),e.putImageData(r,0,0))}),a.__defineGetter__("dataFloat",function(){return o(h)}),a.__defineGetter__("dataRGBE",function(){return h}),a.toHDRBlob=function(e){function r(e,r,t){var n=e.createShader(t);return e.shaderSource(n,r),e.compileShader(n),n}function t(e,t,n){var o=e.createProgram();return e.attachShader(o,r(e,t,e.VERTEX_SHADER)),e.attachShader(o,r(e,n,e.FRAGMENT_SHADER)),e.linkProgram(o),o}var n=new Uint8Array(h.buffer),o="precision highp float;\nattribute vec3 position;\nvarying vec2 tex;\nvoid main() { tex = position.xy/2.0+0.5; gl_Position = vec4(position, 1.0); }",i="precision highp float;\nprecision highp sampler2D;\nuniform sampler2D tx;\nvarying vec2 tex;\nvoid main() { gl_FragColor = texture2D(tx,tex); }",a=this.width,s=this.height;if(a*s*4<n.byteLength)return console.error("not big enough.");var u=document.createElement("canvas");u.width=a,u.height=s;var f=u.getContext("webgl",{antialias:!1,alpha:!0,premultipliedAlpha:!1,preserveDrawingBuffer:!0}),l=f.createTexture();f.activeTexture(f.TEXTURE0),f.bindTexture(f.TEXTURE_2D,l),f.pixelStorei(f.UNPACK_FLIP_Y_WEBGL,!0),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_MAG_FILTER,f.NEAREST),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_MIN_FILTER,f.NEAREST),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_WRAP_S,f.CLAMP_TO_EDGE),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_WRAP_T,f.CLAMP_TO_EDGE),f.texImage2D(f.TEXTURE_2D,0,f.RGBA,a,s,0,f.RGBA,f.UNSIGNED_BYTE,new Uint8Array(n.buffer));var c=t(f,o,i),d=f.getUniformLocation(c,"tx"),E=new Float32Array([-1,-1,0,1,-1,0,1,1,0,1,1,0,-1,1,0,-1,-1,0]),_=f.createBuffer();return f.bindBuffer(f.ARRAY_BUFFER,_),f.bufferData(f.ARRAY_BUFFER,E,f.STATIC_DRAW),f.enableVertexAttribArray(0),f.bindBuffer(f.ARRAY_BUFFER,_),f.vertexAttribPointer(0,3,f.FLOAT,!1,0,0),f.useProgram(c),f.uniform1i(d,0),f.drawArrays(f.TRIANGLES,0,6),e?u.toBlob(e):void 0},a.__defineGetter__("src",function(){return s}),a.__defineSetter__("src",function(o){if(s=o,e&&e.clearRect(0,0,this.width,this.height),o.match(/\.hdr$/i))n(o,function(t,n,o){h=t,this.width=this.style.width=n,this.height=this.style.height=o,e=this.getContext("2d"),r=e.getImageData(0,0,n,o),i(t,u,f,r.data),e.putImageData(r,0,0),this.onload&&this.onload()}.bind(a));else if(o.match(/\.exr$/i))t(o,function(e,r,t){console.log("exr load : ",e,r,t),this.onload&&this.onload()}.bind(a));else if(o.match(/\.hdr\.png$/i)){var l=new Image;l.src=o,l.onload=function(){var t=document.createElement("canvas"),n=this.width=this.style.width=t.width=l.width,o=this.height=this.style.height=t.height=l.height,a=t.getContext("webgl"),s=a.createTexture();a.bindTexture(a.TEXTURE_2D,s),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,a.RGBA,a.UNSIGNED_BYTE,l),fb=a.createFramebuffer(),a.bindFramebuffer(a.FRAMEBUFFER,fb),a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,s,0);var c=new Uint8Array(n*o*4);a.readPixels(0,0,n,o,a.RGBA,a.UNSIGNED_BYTE,c),a.deleteTexture(s),a.deleteFramebuffer(fb),h=c,e=this.getContext("2d"),r=e.getImageData(0,0,n,o),i(h,u,f,r.data),e.putImageData(r,0,0),this.onload&&this.onload()}.bind(a)}}),a}function r(e,r){for(var t in r)e[t]=r[t];return e}function t(e,t){var n=r(new XMLHttpRequest,{responseType:"arraybuffer"});return n.onerror=t.bind(n,!1),n.onload=function(){function e(){return(a[i++]<<0)+(a[i++]<<8)+(a[i++]<<16)+(a[i++]<<24)}function r(){return(a[i++]<<0)+(a[i++]<<8)+(a[i++]<<16)}function n(){return a[i++]}function o(){for(var e,r="";e=n();)r+=String.fromCharCode(e);return r}var i=0,a=new Uint8Array(this.response);if(20000630!=e())return console.log("EXR invalid"),this.onerror();if(n()>2)return console.log("EXR unsupported version"),this.onerror();if(0!=r())return console.log("EXR only simple files .."),this.onerror();if("channels"!=o()||"chlist"!=o())return console.log("EXR invalid headers"),this.onerror();for(var s=[],u=e()+i;u-1>i;)s.push({name:o(),type:e(),u0:n(),u1:r(),u2:e(),u2:e()});return n(),"compression"!=o()||"compression"!=o()?(console.log("EXR only simple files .."),this.onerror()):(console.log(e(),n()),e(),n()?(console.log("EXR compression not supported"),this.onerror()):void(t&&t()))},n.open("GET",e,!0),n.send(null),n}function n(e,t){var n=r(new XMLHttpRequest,{responseType:"arraybuffer"});return n.onerror=t.bind(n,!1),n.onload=function(){if(this.status>=400)return this.onerror();for(var e,r="",n=0,o=new Uint8Array(this.response);!r.match(/\n\n[^\n]+\n/g);)r+=String.fromCharCode(o[n++]);if(e=r.match(/FORMAT=(.*)$/m)[1],"32-bit_rle_rgbe"!=e)return console.warn("unknown format : "+e),this.onerror();for(var i=r.split(/\n/).reverse()[1].split(" "),a=1*i[3],s=1*i[1],u=new Uint8Array(a*s*4),f=0,h=0;s>h;h++){var l=o.slice(n,n+=4),c=[];if(2!=l[0]||2!=l[1]||128&l[2])return console.warn("HDR parse error .."),this.onerror();if((l[2]<<8)+l[3]!=a)return console.warn("HDR line mismatch .."),this.onerror();for(var d=0;4>d;d++)for(var E,_,m=d*a,g=(d+1)*a;g>m;)if(E=o.slice(n,n+=2),E[0]>128)for(_=E[0]-128;_-->0;)c[m++]=E[1];else for(_=E[0]-1,c[m++]=E[1];_-->0;)c[m++]=o[n++];for(var d=0;a>d;d++)u[f++]=c[d],u[f++]=c[d+a],u[f++]=c[d+2*a],u[f++]=c[d+3*a]}t&&t(u,a,s)},n.open("GET",e,!0),n.send(null),n}function o(e,r){for(var t,n=e.byteLength>>2,r=r||new Float32Array(3*n),o=0;n>o;o++)t=Math.pow(2,e[4*o+3]-136),r[3*o]=e[4*o]*t,r[3*o+1]=e[4*o+1]*t,r[3*o+2]=e[4*o+2]*t;return r}function i(e,r,t,n){r=Math.pow(2,void 0===r?1:r)/2,void 0===t&&(t=2.2);for(var o,i=1/t,a=e.byteLength>>2,n=n||new Uint8ClampedArray(4*a),s=0;a>s;s++)o=r*Math.pow(2,e[4*s+3]-136),n[4*s]=255*Math.pow(e[4*s]*o,i),n[4*s+1]=255*Math.pow(e[4*s+1]*o,i),n[4*s+2]=255*Math.pow(e[4*s+2]*o,i),n[4*s+3]=255;return n}return e});